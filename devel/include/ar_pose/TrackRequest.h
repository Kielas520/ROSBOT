// Generated by gencpp from file ar_pose/TrackRequest.msg
// DO NOT EDIT!


#ifndef AR_POSE_MESSAGE_TRACKREQUEST_H
#define AR_POSE_MESSAGE_TRACKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ar_pose
{
template <class ContainerAllocator>
struct TrackRequest_
{
  typedef TrackRequest_<ContainerAllocator> Type;

  TrackRequest_()
    : ar_id(0)
    , goal_dist(0.0)  {
    }
  TrackRequest_(const ContainerAllocator& _alloc)
    : ar_id(0)
    , goal_dist(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _ar_id_type;
  _ar_id_type ar_id;

   typedef float _goal_dist_type;
  _goal_dist_type goal_dist;





  typedef boost::shared_ptr< ::ar_pose::TrackRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ar_pose::TrackRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrackRequest_

typedef ::ar_pose::TrackRequest_<std::allocator<void> > TrackRequest;

typedef boost::shared_ptr< ::ar_pose::TrackRequest > TrackRequestPtr;
typedef boost::shared_ptr< ::ar_pose::TrackRequest const> TrackRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ar_pose::TrackRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ar_pose::TrackRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ar_pose::TrackRequest_<ContainerAllocator1> & lhs, const ::ar_pose::TrackRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ar_id == rhs.ar_id &&
    lhs.goal_dist == rhs.goal_dist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ar_pose::TrackRequest_<ContainerAllocator1> & lhs, const ::ar_pose::TrackRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ar_pose

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ar_pose::TrackRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ar_pose::TrackRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ar_pose::TrackRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ar_pose::TrackRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ar_pose::TrackRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ar_pose::TrackRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ar_pose::TrackRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31ed716f20b90cfc893ff145533260be";
  }

  static const char* value(const ::ar_pose::TrackRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31ed716f20b90cfcULL;
  static const uint64_t static_value2 = 0x893ff145533260beULL;
};

template<class ContainerAllocator>
struct DataType< ::ar_pose::TrackRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ar_pose/TrackRequest";
  }

  static const char* value(const ::ar_pose::TrackRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ar_pose::TrackRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 ar_id\n"
"float32 goal_dist\n"
;
  }

  static const char* value(const ::ar_pose::TrackRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ar_pose::TrackRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ar_id);
      stream.next(m.goal_dist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ar_pose::TrackRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ar_pose::TrackRequest_<ContainerAllocator>& v)
  {
    s << indent << "ar_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ar_id);
    s << indent << "goal_dist: ";
    Printer<float>::stream(s, indent + "  ", v.goal_dist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AR_POSE_MESSAGE_TRACKREQUEST_H
