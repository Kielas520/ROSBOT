// Generated by gencpp from file ar_pose/ArPose.msg
// DO NOT EDIT!


#ifndef AR_POSE_MESSAGE_ARPOSE_H
#define AR_POSE_MESSAGE_ARPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace ar_pose
{
template <class ContainerAllocator>
struct ArPose_
{
  typedef ArPose_<ContainerAllocator> Type;

  ArPose_()
    : number(0)
    , position()
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , confidence(0)  {
    }
  ArPose_(const ContainerAllocator& _alloc)
    : number(0)
    , position(_alloc)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , confidence(0)  {
  (void)_alloc;
    }



   typedef uint32_t _number_type;
  _number_type number;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef uint32_t _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::ar_pose::ArPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ar_pose::ArPose_<ContainerAllocator> const> ConstPtr;

}; // struct ArPose_

typedef ::ar_pose::ArPose_<std::allocator<void> > ArPose;

typedef boost::shared_ptr< ::ar_pose::ArPose > ArPosePtr;
typedef boost::shared_ptr< ::ar_pose::ArPose const> ArPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ar_pose::ArPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ar_pose::ArPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ar_pose::ArPose_<ContainerAllocator1> & lhs, const ::ar_pose::ArPose_<ContainerAllocator2> & rhs)
{
  return lhs.number == rhs.number &&
    lhs.position == rhs.position &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ar_pose::ArPose_<ContainerAllocator1> & lhs, const ::ar_pose::ArPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ar_pose

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ar_pose::ArPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ar_pose::ArPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ar_pose::ArPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ar_pose::ArPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ar_pose::ArPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ar_pose::ArPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ar_pose::ArPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de174cac63b5f4f47785f23b578b7ac0";
  }

  static const char* value(const ::ar_pose::ArPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde174cac63b5f4f4ULL;
  static const uint64_t static_value2 = 0x7785f23b578b7ac0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ar_pose::ArPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ar_pose/ArPose";
  }

  static const char* value(const ::ar_pose::ArPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ar_pose::ArPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 number\n"
"geometry_msgs/Point position\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"uint32 confidence\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ar_pose::ArPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ar_pose::ArPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number);
      stream.next(m.position);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ar_pose::ArPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ar_pose::ArPose_<ContainerAllocator>& v)
  {
    s << indent << "number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.number);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "confidence: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AR_POSE_MESSAGE_ARPOSE_H
